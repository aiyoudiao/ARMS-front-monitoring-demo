{"version":3,"file":"login-BvWIb-rW.js","sources":["../../src/hooks/common/login.ts"],"sourcesContent":["import { useLoading } from '@sa/hooks';\nimport { useTranslation } from 'react-i18next';\nimport { getUerName, login, resetStore } from '@/store/slice/auth';\nimport { initAuthRoute } from '@/store/slice/route';\nimport { useAppDispatch } from '../business/useStore';\nimport { useRouterPush } from './routerPush';\n\nexport function useLogin() {\n  const { loading, startLoading, endLoading } = useLoading();\n  const { redirectFromLogin } = useRouterPush();\n  const { t } = useTranslation();\n\n  const dispatch = useAppDispatch();\n\n  async function toLogin(params: { userName: string; password: string }, redirect = true) {\n    startLoading();\n    await dispatch(login(params));\n    const userName = dispatch(getUerName());\n\n    if (userName) {\n      await dispatch(initAuthRoute());\n\n      if (redirect) {\n        await redirectFromLogin(redirect);\n      }\n\n      window.$notification?.success({\n        message: t('page.login.common.loginSuccess'),\n        description: t('page.login.common.welcomeBack', { userName })\n      });\n    } else {\n      dispatch(resetStore());\n    }\n    endLoading();\n  }\n\n  return {\n    loading,\n    toLogin\n  };\n}\n"],"names":["useLogin","loading","startLoading","endLoading","useLoading","redirectFromLogin","useRouterPush","t","useTranslation","dispatch","useAppDispatch","toLogin","params","redirect","login","userName","getUerName","initAuthRoute","_a","resetStore"],"mappings":"iPAOO,SAASA,GAAW,CACzB,KAAM,CAAE,QAAAC,EAAS,aAAAC,EAAc,WAAAC,GAAeC,EAAW,EACnD,CAAE,kBAAAC,GAAsBC,IACxB,CAAE,EAAAC,GAAMC,IAERC,EAAWC,IAEF,eAAAC,EAAQC,EAAgDC,EAAW,GAAM,OACzEX,IACP,MAAAO,EAASK,EAAMF,CAAM,CAAC,EACtB,MAAAG,EAAWN,EAASO,EAAA,CAAY,EAElCD,GACI,MAAAN,EAASQ,GAAe,EAE1BJ,GACF,MAAMR,EAAkBQ,CAAQ,GAGlCK,EAAA,OAAO,gBAAP,MAAAA,EAAsB,QAAQ,CAC5B,QAASX,EAAE,gCAAgC,EAC3C,YAAaA,EAAE,gCAAiC,CAAE,SAAAQ,EAAU,CAAA,IAG9DN,EAASU,GAAY,EAEZhB,GACb,CAEO,MAAA,CACL,QAAAF,EACA,QAAAU,CAAA,CAEJ"}